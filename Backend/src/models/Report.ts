import { Schema,model,Document,Types,Model } from "mongoose";
import { IUser } from "./User";

export interface IReport extends Document{
    type: string,
    generatedBy: Types.ObjectId | IUser,
    patient: Types.ObjectId | IUser,
    date: Date,
    pdfUrl: string,
    resumeData?: string,
    status?:'generated'|'signed'|'send',
    metadata?: Record<string, any>,
    }

const reportSchema = new Schema<IReport>({
    type: { type: String, required: true,trim: true,index: true },
    generatedBy: { type: Schema.Types.ObjectId, ref: 'User', index: true },
    patient: { type: Schema.Types.ObjectId, ref: 'User', index: true },
    date:{type:Date,default:Date.now,index:true},
    pdfUrl:{
        type: String,
        required:true,
        validate:{
            validator:(value:string)=>{
                return value.startsWith('https://')&& (value.endsWith('.pdf') || value.includes('.pdf?'))
            },
            message:'Invalid URL'
        }
    },
    resumeData:{type:String,trim:true,maxlength:[2000,'Resume data must be less than 2000 characters']},
    status:{type:String,enum:['generated','signed','send'],default:'generated',index:true},
    metadata:{type:Schema.Types.Mixed,default:{}}
},{
    timestamps: true,
    versionKey: false,
    toJSON:{
        virtuals:true,
        transform:function (doc,ret){
            delete ret._id
            delete ret.__v
            return ret
        }
    }
}
)

reportSchema.index({patient:1,date:-1})
reportSchema.index({type:1,status:1})

reportSchema.virtual('formattedDate').get(function(){
    return this.date?.toLocaleDateString('es-ES',{
        day:'2-digit',
    month:'2-digit',
    year:'numeric'
    })
    
})


reportSchema.pre<IReport>('save',function(next){
    if(!this.generatedBy && this.status==='signed'){
        throw new Error('Generated by is required for signed reports')
    }
    next()
})

reportSchema.statics.findByPatient=function(patientId:Types.ObjectId,limit:number=50){
    return this.find({patient:patientId}).sort({date:-1}).limit(limit).populate('generatedBy','name lastName speciality')
}


reportSchema.statics.markAllAsSend= function(reportId:Types.ObjectId){
    return this.findByIdAndUpdate(reportId,
        {$set: {status:'send'}},
        {new:true}
    )
}


reportSchema.methods.signedReport= function(userId:Types.ObjectId){
    this.status='signed'
    this.generatedBy=userId
    return this.save()
}

interface ReportModel extends Model<IReport>{
    findByPatient:(patientId:Types.ObjectId,limit?:number)=> Promise<IReport[]>
    markAllAsSend:(reportId:Types.ObjectId)=>Promise<IReport>|null
}


export const Report=model<IReport,ReportModel>('Report',reportSchema)

